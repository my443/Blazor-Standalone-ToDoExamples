@page "/listwithdate"
@using ToDo.Client.Data
@using ToDo.Client.Models

<h3>List With Date</h3>
<button @onclick="AddItem">Add Item</button>
<button @onclick="DeleteItem">Delete Item</button>
<InputDate id="datepicker" @bind-Value="SelectedDate" class="form-control" style="width:200px"/>
<button @onclick="SetPreviousDay">Previous Day</button>
<button @onclick="SetToday">Today</button>
<button @onclick="SetNextDay">Next Day</button>


<table>
    @foreach (var item in CurrentDayItems)
    {
        <tr>
            <td><InputCheckbox @bind-Value="item.IsDone" /></td>
            <td><InputText @bind-Value="item.Title" /></td>
            <td>
                <InputRadioGroup @bind-Value="SelectedItemId" Name="Selected">
                    <InputRadio Value="@item.Id" />
                </InputRadioGroup>
            </td>
        </tr>
    }
</table>

<p>Selected Item ID: @SelectedItemId</p>
<h4>Items</h4>

<ul>
    @foreach (var item in ToDoItems)
    {
        <li>@item.Id / @item.Title / @item.IsDone // @item.ItemDate</li>
    }
</ul>
@code {
    private AppDbContext context = new AppDbContext();
    private List<ToDoItem> ToDoItems;
    private List<ToDoItem> CurrentDayItems;
    private int? SelectedItemId;
    private DateOnly _selectedDate;

    private DateOnly SelectedDate
    {
        get => _selectedDate;
        set
        {
            if (_selectedDate != value)
            {
                _selectedDate = value;
                UpdateCurrentDayData(); // Call your function here
            }
        }
    }


    private ToDoItem SelectedItem;

    protected override async Task OnInitializedAsync()
    {
        _selectedDate = DateOnly.FromDateTime(DateTime.Now);
        SelectedDate = DateOnly.FromDateTime(DateTime.Now);
        ToDoItems = context.ToDoItems;
        CurrentDayItems = ToDoItems.Where(t => t.ItemDate == SelectedDate).ToList();
        SelectFirstItem();
    }

    private void AddItem()
    {
        int newId = GetNextId();

        ToDoItem newItem = new ToDoItem
            {
                Id = newId,
                Title = "New Item",
                IsDone = false,
                ItemDate = SelectedDate
            };

        ToDoItems.Add(newItem);
        UpdateCurrentDayData();
    }

    private void DeleteItem()
    {
        ToDoItem itemToDelete = ToDoItems.FirstOrDefault(item => item.Id == SelectedItemId.Value);
        ToDoItems.Remove(itemToDelete);
        SelectFirstItem();
        UpdateCurrentDayData();

    }

    private int GetNextId() { 
        return ToDoItems.Select(item => item.Id).DefaultIfEmpty().Max() + 1;
    }
    private void SelectFirstItem()
    {
        SelectedItemId = ToDoItems.Any() ? CurrentDayItems.Min(item => (int?)item.Id) : null; // Select the first item
    }

    private void SetPreviousDay() {
        SelectedDate = SelectedDate.AddDays(-1);
        UpdateCurrentDayData();
    }

    private void SetNextDay() {
        SelectedDate = SelectedDate.AddDays(1);
        UpdateCurrentDayData();
    }

    public void SetToday(){
        SelectedDate = DateOnly.FromDateTime(DateTime.Now);
        UpdateCurrentDayData();
    }

    public void UpdateCurrentDayData(){
        CurrentDayItems = ToDoItems.Where(t => t.ItemDate == SelectedDate).ToList();
        SelectFirstItem();
        StateHasChanged();
    }
}
